#!/usr/bin/env node

/**
 * Module dependenceis.
 */

var path = require('path');
var starsky = require('..');
var program = require('commander');
var once = require('once-upon');

/**
 * Program options.
 */

program
.version(starsky.version)
.usage('[options] path/to/consumer-module.js')
.option('--config [config]', 'filepath to the yaml or json configuration')
.option('--namespace [namespace]', 'namespace to prepend to consumer queue names')
.option('--mq_exchange [mq_exchange]', 'exchange name')
.option('--mq_host [mq_host]', 'rabbit server host')
.option('--mq_port [mq_port]', 'rabbit server port')
.option('--mq_vhost [mq_vhost]', 'rabbit server vhost')
.option('--mq_username [mq_username]', 'rabbit server username')
.option('--mq_password [mq_password]', 'rabbit server password')
.option('--mq_tls [mq_tls]', 'use tls for the rabbit server connection')
.option('--mq_tls_cert [mq_tls_cert]', 'filepath to the tls cert')
.option('--mq_tls_key [mq_tls_key]', 'filepath to the tls key')
.option('--timeout [timeout]', 'time to wait after recieving a kill signal before force exiting', 10000)
.parse(process.argv);

/**
 * Configure by loading the `config` file.
 */

if (program.config) {
  starsky.load(path.resolve(program.config));
}

/**
 * Configure by program options.
 */

if (!program.config) {
  starsky.set({
      'mq_exchange': program['mq_exchange']
    , 'mq_host': program['mq_host']
    , 'mq_port': program['mq_port']
    , 'mq_vhost': program['mq_vhost']
    , 'mq_username': program['mq_username']
    , 'mq_password': program['mq_password']
    , 'mq_tls': program['mq_tls']
    , 'mq_tls_cert': program['mq_tls_cert']
    , 'mq_tls_key': program['mq_tls_key']
    , 'namespace': program['namespace']
  });
}

/**
 * Connect.
 */

starsky.connect(function (err) {
  if (err) return fail(err);

  var file = path.resolve(program.args[0]);
  var object = require(file);
  var name = object.name || path.basename(file, '.js');
  // hack for multiple subscriptions...
  var topic = object.topic || object.topics || name;
  var fn = object.consume;
  var consumer = starsky.consumer(name);

  once('SIGTERM SIGINT', process, function () {
    var t = setTimeout(function () {
      process.exit(1);
    }, program.timeout);

    consumer.quit(function (err) {
      if (err) return fail(err);
      starsky.disconnect();
      starsky.on('disconnect', function () {
        clearTimeout(t);
        process.exit(0);
      });
    });
  });

  consumer.subscribe(topic);
  consumer.consume(fn);
});

/**
 * Error utility.
 */

function fail (err) {
  console.error(err.stack || err.message);
  process.exit(1);
}
